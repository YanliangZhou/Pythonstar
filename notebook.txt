for ele in enumerate(list):
    print (ele)
输出是带''()的元组
for count, ele in enumerate(list):
    print (count, ele)
输出不带''()，第一个变量是int，第二个变量是list中的元素
########################################################################################################################
list里面可以是字符串''，也可以是数字
########################################################################################################################
时间复杂度T(n) = O(f(n))， 空间复杂度S(n) = O(f(n))
########################################################################################################################
range()是从0开始，len()只是显示个数，从1开始
########################################################################################################################
可以用一下形式同时定义很多个变量
start, end = 0, len(nums) - 1
########################################################################################################################
for循环针对变量i在某一范围内变化，while循环针对某一条件，可通过在循环中设定+1来实现遍历，例如把所有指定值放到最后，有可能新换的值也是目标值，又要换，通过while就不会出现漏过这个的情况。for其实也可以通过-1来实现。
########################################################################################################################
break语句可以在循环过程中直接退出循环，而continue语句可以提前结束本轮循环，并直接开始下一轮循环。这两个语句通常都必须配合if语句使用。
########################################################################################################################
Kadane算法扫描一次整个数列的所有数值，在每一个扫描点计算以该点数值为结束点的子数列的最大和（正数和）。该子数列由两部分组成：以前一个位置为结束点的最大子数列、该位置的数值。因为该算法用到了“最佳子结构”（以每个位置为终点的最大子数列都是基于其前一位置的最大子数列计算得出），该算法可看成动态规划的一个例子。
########################################################################################################################
分治法(Divide-and-conquer algorithm)是一种基于多分支递归的算法设计范例。分而治之算法的工作原理是将问题递归分解为两个或多个相同或相关类型的子问题，直到这些子问题变得足够简单以至于可以直接解决。然后将子问题的解决方案组合起来，以解决原始问题。这种分治法是解决各种问题（例如排序（例如，快速排序，合并排序），乘以大量数字（例如，Karatsuba算法），找到最接近的点对，语法分析）的高效算法的基础。（例如，自上而下的解析器），并计算离散傅里叶变换（FFT）。
相关扩展算法：https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm
########################################################################################################################
函数range(a, b) 让Python从你指定的第一个值开始数，并在到达你指定的第二个值后停止，因此输出不包含第二个值,第二个值也不会带进loop。但如果是range(len(list))，就是从0到len-1。list[0:n]是0位到n-1位。
########################################################################################################################
sub = nums[i:j]
sub_sum = sum(sub)能计算loop中子列表和。
########################################################################################################################
动态规划（英语：Dynamic programming，简称DP）,当前问题的解可以在先前问题的解的基础上获得就是动态规划的思路.
########################################################################################################################
int型list和str型list互转
一.方式一
1.str --> int
results = ['1','2','3']
results = list(map(int, results))

2.int --> str
results = [1,2,3]
results = list(map(str, results))
二.方式二

1.str --> int
results = ['1','2','3']
results = [ int(i) for i in results ]

2.int --> str results = [1,2,3]
results = [ str(i) for i in results ]
########################################################################################################################
int转变成list
[int(x) for x in str(num)]
########################################################################################################################
Python map() 函数 map(function, iterable, ...)
>>>def square(x) :            # 计算平方数
...     return x ** 2
...
>>> map(square, [1,2,3,4,5])   # 计算列表各个元素的平方
[1, 4, 9, 16, 25]
>>> map(lambda x: x ** 2, [1, 2, 3, 4, 5])  # 使用 lambda 匿名函数
[1, 4, 9, 16, 25]

# 提供了两个列表，对相同位置的列表数据进行相加
>>> map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10])
[3, 7, 11, 15, 19]
########################################################################################################################
iterate once over the array 遍历一遍数组
########################################################################################################################
打印的东西需要排成一排而不是每个一行，用
for i in range(10):
    print(i,end='')
########################################################################################################################
map(function, iterable, ...) 会根据提供的函数对指定序列做映射。第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表。结果一般需要用list表达出来。[list(map(function, iterable, ...））】
自定义map函数：map(lambda x, y: x+y, x的赋值, y的赋值)
map可以给list中每一位分别处理，例如：
a = [1]+[0]
b = [0]+[1]
aa = list(map(lambda x, y :x+y, a, b))
print(aa)
结果是[1, 1]
而直接加：
print(a+b)
结果是[1, 0, 0, 1]
########################################################################################################################
[1]+[0]=[1,0]
########################################################################################################################
元组中只包含一个元素时，需要在元素后面添加逗号 tup1 = (50,)， Python的元组与列表类似，不同之处在于元组的元素不能修改，但能两个元组拼接。
元组使用小括号，列表使用方括号。tup1 = ('physics', 'chemistry', 1997, 2000)打印第一个元素会是不带引号的physics。
tuple(seq) 将列表转换为元组。
实例：
tup1 = ('physics', 'chemistry', 1997, 2000)
tup2 = (1, 2, 3, 4, 5 )
tup3 = "a", "b", "c", "d"
########################################################################################################################
zip() 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。
我们可以使用 list() 转换来输出列表。
如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。
实例：
>>>a = [1,2,3]
>>> b = [4,5,6]
>>> c = [4,5,6,7,8]
>>> zipped = zip(a,b)     # 返回一个对象
>>> zipped
<zip object at 0x103abc288>
>>> list(zipped)  # list() 转换为列表
[(1, 4), (2, 5), (3, 6)]
>>> list(zip(a,c))              # 元素个数与最短的列表一致
[(1, 4), (2, 5), (3, 6)]

>>> a1, a2 = zip(*zip(a,b))          # 与 zip 相反，zip(*) 可理解为解压，返回二维矩阵式
>>> list(a1)
[1, 2, 3]
>>> list(a2)
[4, 5, 6]
########################################################################################################################
去掉class（),def后面的self，if __name__ == "__main__":，就可以直接使用def后面的函数
########################################################################################################################
a = 0
b = 1
for _ in range(20):
    (a, b) = (b, a + b)
    print(a, end=' ')
########################################################################################################################
给列表中所有元素进行批量操作的另一种方式是state = [True for _ in range(n)]
########################################################################################################################
变量之间用=表示相等，则左右等价，若内存地址不变的情况下进行处理，则改变任何一个变量会改变另一个。例如列表append。
若想不改变原来的变量，
方法一：变量.copy()；
方法二：Copy List Using Slicing Syntax
例如：new_list = list[:]
    new_list.append('dog')
以上适用于变量指代的是列表等内存地址不变的情况下可以进行修改的情况，对于变量等于数字，则改变一个不会改变另一个。
例如：
last=1
first=last
first +=1
print(last)
print(first)

output:
1
2
但如果是重新分配了值，内存地址变了，则只会改变重新分配的变量。例如字符串或数字：
a = 'ABC'
b = a
a = a+'XYZ'
print(b)
print(a)
########################################################################################################################
>>> [m + n for m in 'ABC' for n in 'XYZ']
['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']
########################################################################################################################
>>> d = {'x': 'A', 'y': 'B', 'z': 'C' }
>>> [k + '=' + v for k, v in d.items()]
['y=B', 'x=A', 'z=C']
########################################################################################################################
递归算法-阶乘、汉诺塔、斐波那契数列（Fibonacci sequence）问题，链接https://blog.csdn.net/SeeTheWorld518/article/details/47957183
########################################################################################################################
交互式快速运行当前选中代码快捷键alt+shift+E
########################################################################################################################
print()函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出：
>>> print('The quick brown fox', 'jumps over', 'the lazy dog')
The quick brown fox jumps over the lazy dog
print()会依次打印每个字符串，遇到逗号“,”会输出一个空格。
另一种调用方法：
class Person:
    def __init__(self, name):
        self.name = name

    def think(self):
        print("{} is thinking".format(self.name))
output：
>>> Person.think(lisi)
lisi is thinking
########################################################################################################################
input用法：name = input('please enter your name: ')
name = input('please enter your name: ')
print('hello,', name)
因为input()返回的数据类型是str,所以如果输入的是数字，应该用int改变数据类型。
########################################################################################################################
如果字符串内部既包含'又包含"怎么办？可以用转义字符\来标识，比如：
'I\'m \"OK\"!'
表示的字符串内容是：
I'm "OK"!
\n表示换行，\t表示制表符，字符\本身也要转义，所以\\表示的字符就是\
如果字符串里面有很多字符都需要转义，就需要加很多\，为了简化，Python还允许用r''表示''内部的字符串默认不转义，可以自己试试：
>>> print('\\\t\\')
\       \
>>> print(r'\\\t\\')
\\\t\\
如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用'''...'''的格式表示多行内容，r可以用在'''...'''外面但不能用在里面，可以自己试试：
>>> print('''line1
    line2
    line3''')
line1
line2
line3
########################################################################################################################
在Python中，通常用全部大写的变量名表示常量：PI = 3.14159265359
########################################################################################################################
由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
########################################################################################################################
在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下：
>>> 'Hello, %s' % 'world'
'Hello, world'
>>> 'Hi, %s, you have $%d.' % ('Michael', 1000000)
'Hi, Michael, you have $1000000.'
你可能猜到了，%运算符就是用来格式化字符串的。在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。
注意，可用在for循环中打印迭代的数据。
format()
另一种格式化字符串的方法是使用字符串的format()方法，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，不过这种方式写起来比%要麻烦得多：
>>> 'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)
'Hello, 小明, 成绩提升了 17.1%'
########################################################################################################################
>>> p = ['asp', 'php']
>>> s = ['python', 'java', p, 'scheme']
要拿到'php'可以写p[1]或者s[2][1]
########################################################################################################################
只有1个元素的tuple定义时必须加一个逗号,，来消除歧义：
>>> t = (1,)
>>> t
(1,)
Python在显示只有1个元素的tuple时，也会加一个逗号,，以免你误解成数学计算意义上的括号。
########################################################################################################################
一个“可变的”tuple：
>>> t = ('a', 'b', ['A', 'B'])
>>> t[2][0] = 'X'
>>> t[2][1] = 'Y'
>>> t
('a', 'b', ['X', 'Y'])
表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向'a'，就不能改成指向'b'，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！
理解了“指向不变”后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。
########################################################################################################################
if x:
    print('True')
只要x是非零数值、非空字符串、非空list等，就判断为True，否则为False。
########################################################################################################################
在字典中，要避免key不存在的错误，有两种办法，一是通过in判断key是否存在：
>>> 'Thomas' in d
False
二是通过dict提供的get()方法，如果key不存在，可以返回None，或者自己指定的value：
>>> d.get('Thomas')
>>> d.get('Thomas', -1)
-1
注意：返回None的时候Python的交互环境不显示结果。
########################################################################################################################
请务必注意，dict内部存放的顺序和key放入的顺序是没有关系的。
和list比较，dict有以下几个特点：
查找和插入的速度极快，不会随着key的增加而变慢；
需要占用大量的内存，内存浪费多。
而list相反：
查找和插入的时间随着元素的增加而增加；
占用空间小，浪费内存很少。
所以，dict是用空间来换取时间的一种方法。
########################################################################################################################
在Python中，字符串、整数等都是不可变的，因此，可以放心地作为字典的key。而list是可变的，就不能作为key
########################################################################################################################
set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：
>>> s1 = set([1, 2, 3])
>>> s2 = set([2, 3, 4])
>>> s1 & s2
{2, 3}
>>> s1 | s2
{1, 2, 3, 4}
########################################################################################################################
str是不变对象，而list是可变对象。
对于可变对象，比如list，对list进行操作，list内部的内容是会变化的，比如：
>>> a = ['c', 'b', 'a']
>>> a.sort()
>>> a
['a', 'b', 'c']
而对于不可变对象，比如str，对str进行操作呢：
>>> a = 'abc'
>>> a.replace('a', 'A')
'Abc'
>>> a
'abc'
虽然字符串有个replace()方法，也确实变出了'Abc'，但变量a最后仍是'abc'，应该怎么理解呢？
我们经常说，对象a的内容是'abc'，但其实是指，a本身是一个变量，它指向的对象的内容才是'abc'：当我们调用a.replace('a', 'A')时，实际上调用方法replace是作用在字符串对象'abc'上的，而这个方法虽然名字叫replace，但却没有改变字符串'abc'的内容。相反，replace方法创建了一个新字符串'Abc'并返回，如果我们用变量b指向该新字符串，就容易理解了，变量a仍指向原有的字符串'abc'，但变量b却指向新字符串'Abc'了：所以，对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。
########################################################################################################################
要理解dict的有关内容需要你理解哈希表（map）的相关基础知识，这个其实是《算法与数据结构》里面的内容。

1.list和tuple其实是用链表顺序存储的，也就是前一个元素中存储了下一个元素的位置，这样只要找到第一个元素的位置就可以顺藤摸瓜找到所有元素的位置，所以list的名字其实就是个指针，指向list的第一个元素的位置。list的插入和删除等可以直接用链表的方式进行，比如我要在第1个元素和第2个元素中间插入一个元素，那么直接在链表的最后面（我们假设这个list只有两个元素，那么也就是在第3个元素的位置上）插入这个元素，然后把第一个元素指针指向这个元素（第3个位置），然后再把新插入的元素的指针指向原来的第2个元素，这样插入操作就完成了。读取这个list的时候，先用list的名字（就是个指针，指向第1个元素的位置）找到第一个元素，然后用第1一个元素的指针找到第2个元素（位置3），然后用第2个元素的指针找到第3个元素（位置2），以此类推。所以list的顺序和内存中的实际顺序其实不一定完全对应。这种存储方式不会浪费内存，但查找起来特别费时间，因为要按照链表一个一个找下去，如果你的list特别大的话，那么要等好久才会找到结果。

2.dict则为了快速查找使用了一种特别的方法，哈希表。哈希表采用哈希函数从key计算得到一个数字（哈希函数有个特点：对于不同的key，有很大的概率得到的哈希值也不同），然后直接把value存储到这个数字所对应的地址上，比如key='ABC'，value=10，经过哈希函数得到key对应的哈希值为123，那么就申请一个有1000个地址（从0到999）的内存，然后把10存放在地址为123的地方。类似的，对于key='BCD'，value=20，得到key的哈希值为234，那么就把20存放在地址为234的地方。对于这样的表查找起来是非常方便的。只要给出key，计算得到哈希值，然后直接到对应的地址去找value就可以了。无论有几个元素，都可以直接找到value，无需遍历整个表。不过虽然dict查找速度快，但内存浪费严重，你看我们只存储了两个元素，都要申请一个长度为1000的内存。

3.现在你知道为啥key要用不可变对象了吧？因为不可变对象是常量，每次的哈希值算出来都是固定的，这样就不会出错。比如key='ABC'，value=10，存储地址为123，假设我突发奇想，把key改成'BCD'，那么当查找'BCD'的value的时候就会去234的地址找，但那里啥也没有，这就乱套了。

4.你看我们上面有一句话：对于不同的key，有很大的概率得到的哈希值也不同。那么有很小的概率不同的key可以得到相同的哈希值了？没错，比如对于我们的例子来说，哈希值只有3位，那么只要元素个数超过1000，就一定会有至少两个key的哈希值相同（鸽笼原理），这种情况叫“冲突”，设计哈希表的时候要采取办法减少冲突，实在冲突了也要想办法补救。不过这是编译器的事情，况且对于初学者的我们来说碰到的冲突的概率基本等于零，就不用操心了。
########################################################################################################################
python 3.6开始, 字典就是有序的了, 3.7正式将字典的有序性更新为可依赖特性.
set依然需要当做无序, 无论表现出来的是不是有序
########################################################################################################################
使用key-value存储结构的dict在Python中非常有用，选择不可变对象作为key很重要，最常用的key是字符串。
tuple虽然是不变对象，但试试把(1, 2, 3)和(1, [2, 3])放入dict或set中，并解释结果。
#dict:
d = {1:[1, 2, 3]}       #尝试输入tuple不变对象
print(d)                #{1: (1, 2, 3)}
d = {1:(1, [2, 3])}     #key不变，value变化不影响dict运行
print(d)                #{1: (1, [2, 3])}
#说明：dict中只要key不变，value可以变化
#set
'''
s = set([(1,2,3)])      #尝试输入tuple不变对象
print(s)                #{(1, 2, 3)}
s = set([(1, [2, 3])])  #tuple中加入list元素
print(s)                #TypeError: unhashable type: 'list'
'''
#说明：set中不能出现任何可变元素包括tuple中的可变元素list
########################################################################################################################
函数中，如果没有return语句，函数执行完毕后也会返回结果，只是结果为None。return None可以简写为return。
########################################################################################################################
pass语句什么都不做，那有什么用？实际上pass可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个pass，让代码能运行起来。
########################################################################################################################
我们看似可以同时获得两个返回值：
>>> x, y = move(100, 100, 60, math.pi / 6)
>>> print(x, y)
151.96152422706632 70.0
但其实这只是一种假象，Python函数返回的仍然是单一值：
>>> r = move(100, 100, 60, math.pi / 6)
>>> print(r)
(151.96152422706632, 70.0)
原来返回值是一个tuple！但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。
########################################################################################################################
默认参数降低了函数调用的难度，而一旦需要更复杂的调用时，又可以传递更多的参数来实现。无论是简单调用还是复杂调用，函数只需要定义一个。
有多个默认参数时，调用的时候，既可以按顺序提供默认参数，比如调用enroll('Bob', 'M', 7)，意思是，除了name，gender这两个参数外，最后1个参数应用在参数age上，city参数由于没有提供，仍然使用默认值。
也可以不按顺序提供部分默认参数。当不按顺序提供部分默认参数时，需要把参数名写上。比如调用enroll('Adam', 'M', city='Tianjin')，意思是，city参数用传进去的值，其他默认参数继续使用默认值。
但默认参数有个最大的坑，
def add_end(L=[]):
    L.append('END')
    return L
当你正常调用时，结果似乎不错：
>>> add_end([1, 2, 3])
[1, 2, 3, 'END']
>>> add_end(['x', 'y', 'z'])
['x', 'y', 'z', 'END']
当你使用默认参数调用时，一开始结果也是对的：
>>> add_end()
['END']
但是，再次调用add_end()时，结果就不对了：
>>> add_end()
['END', 'END']
>>> add_end()
['END', 'END', 'END']
很多初学者很疑惑，默认参数是[]，但是函数似乎每次都“记住了”上次添加了'END'后的list。
Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L也是一个变量，它指向对象[]，每次调用该函数，如果改变了L的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的[]了。
 定义默认参数要牢记一点：默认参数必须指向不变对象！
 要修改上面的例子，我们可以用None这个不变对象来实现：
def add_end(L=None):
    if L is None:
        L = []
    L.append('END')
    return L
现在，无论调用多少次，都不会有问题：
>>> add_end()
['END']
>>> add_end()
['END']
为什么要设计str、None这样的不变对象呢？因为不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。函数定义时，如果是可变的变量，则其值能被改变。如果是不可变的，哪怕在函数中被赋了其他值，再重新调用时也会变回原来状态。
########################################################################################################################
break：跳出所在的当前整个循环，到外层代码继续执行。

continue：跳出本次循环，从下一个迭代继续运行循环，内层循环执行完毕，外层代码继续运行。

return：直接返回到上一级函数（递归），如果没有上一级直接退出所有程序并返回一个结果，所有本级函数体内的代码（包括循环体）都不会再执行。
########################################################################################################################
递归时，应该正推三层，再从第一次得出结果时往前推三层。如果每层的函数参数都会继承到下一层，例如有变量等于这些参数，那么中间不需要return，如果结果是True or False，那么递归代码中应该加上return来让结果返回上一级从而一级一级往上传
例如：
def binary_search(alist, item):
    n = len(alist)
    if n > 0:
        mid = n//2
        if alist[mid] == item:
            return True
        elif item < alist[mid]:
            return binary_search(alist[:mid], item)
        else:
            return binary_search(alist[mid:], item)
    return False

li = [17, 20, 35, 36, 50, 54, 55, 70]
result = binary_search(li, 17)
print(result)
########################################################################################################################
列表中哪怕只有一个None，也会判定列表为True，只有是【】空列表，才会是False
########################################################################################################################
如果Class 后面的类people没有()，那么可以直接把想代进去的参数拿来用，例如类中有个eat()函数，可以直接:
人名=people()
人名.eat()
########################################################################################################################
Python中self用法详解:
在介绍Python的self用法之前，先来介绍下Python中的类和实例……
我们知道，面向对象最重要的概念就是类（class）和实例（instance），类是抽象的模板，比如学生这个抽象的事物，可以用一个Student类来表示。而实例是根据类创建出来的一个个具体的“对象”，每一个对象都从类中继承有相同的方法，但各自的数据可能不同。
1、以Student类为例，在Python中，定义类如下：

class Student(object):
    pass

（Object）表示该类从哪个类继承下来的，Object类是所有类都会继承的类。

2、实例：定义好了类，就可以通过Student类创建出Student的实例，创建实例是通过类名+()实现：

student = Student()

3、由于类起到模板的作用，因此，可以在创建实例的时候，把我们认为必须绑定的属性强制填写进去。这里就用到Python当中的一个内置方法__init__方法，例如在Student类时，把name、score等属性绑上去:

class Student(object):
    def __init__(self, name, score):
        self.name = name
        self.score = score

这里注意：（1）、__init__方法的第一参数永远是self，表示创建的类实例本身，因此，在__init__方法内部，就可以把各种属性绑定到self，因为self就指向创建的实例本身。（2）、有了__init__方法，在创建实例的时候，就不能传入空的参数了，必须传入与__init__方法匹配的参数，但self不需要传，Python解释器会自己把实例变量传进去：

>>>student = Student("Hugh", 99)
>>>student.name
"Hugh"
>>>student.score
99

另外，这里self就是指类本身，self.name就是Student类的属性变量，是Student类所有。而name是外部传来的参数，不是Student类所自带的。故，self.name = name的意思就是把外部传来的参数name的值赋值给Student类自己的属性变量self.name。

4、和普通数相比，在类中定义函数只有一点不同，就是第一参数永远是类的本身实例变量self，并且调用时，不用传递该参数。除此之外，类的方法(函数）和普通函数没啥区别，你既可以用默认参数、可变参数或者关键字参数（*args是可变参数，args接收的是一个tuple，**kw是关键字参数，kw接收的是一个dict）。

5、既然Student类实例本身就拥有这些数据，那么要访问这些数据，就没必要从外面的函数去访问，而可以直接在Student类的内部定义访问数据的函数（方法），这样，就可以把”数据”封装起来。这些封装数据的函数是和Student类本身是关联起来的，称之为类的方法：

class Student(obiect):
    def __init__(self, name, score):
        self.name = name
        self.score = score
    def print_score(self):
        print "%s: %s" % (self.name, self.score)

>>>student = Student("Hugh", 99)
>>>student.print_score
Hugh: 99

这样一来，我们从外部看Student类，就只需要知道，创建实例需要给出name和score。而如何打印，都是在Student类的内部定义的，这些数据和逻辑被封装起来了，调用很容易，但却不知道内部实现的细节。

如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线，在Python中，实例的变量名如果以开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问，所以，我们把Student类改一改：

class Student(object):

    def __init__(self, name, score):
        self.__name = name
        self.__score = score
    def print_score(self):
        print "%s: %s" %(self.__name,self.__score)

改完后，对于外部代码来说，没什么变动，但是已经无法从外部访问实例变量.__name和实例变量.__score了：

>>> student = Student('Hugh', 99)
>>> student.__name
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Student' object has no attribute '__name'

这样就确保了外部代码不能随意修改对象内部的状态，这样通过访问限制的保护，代码更加健壮。

但是如果外部代码要获取name和score怎么办？可以给Student类增加get_name和get_score这样的方法：

class Student(object):
    ...

    def get_name(self):
        return self.__name

    def get_score(self):
        return self.__score

如果又要允许外部代码修改score怎么办？可以给Student类增加set_score方法：

class Student(object):
    ...

    def set_score(self, score):
        self.__score = score

需要注意的是，在Python中，变量名类似__xxx__的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用__name__、__score__这样的变量名。

有些时候，你会看到以一个下划线开头的实例变量名，比如_name，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。

封装的另一个好处是可以随时给Student类增加新的方法，比如：get_grade:

class Student(object):
    ...
    def get_grade(self):
        if self.score >= 90:
            return 'A'
        elif self.score >= 60:
            return 'B'
        else:
            return 'C'

同样的，get_grade方法可以直接在实例变量上调用，不需要知道内部实现细节：

>>> student.get_grade()
'A'

6、self的仔细用法
(1)、self代表类的实例，而非类。

class Test:
    def ppr(self):
        print(self)
        print(self.__class__)

t = Test()
t.ppr()
执行结果：
<__main__.Test object at 0x000000000284E080>
<class '__main__.Test'>

从上面的例子中可以很明显的看出，self代表的是类的实例。而self.__class__则指向类。
注意：把self换成this，结果也一样，但Python中最好用约定俗成的self。
（2）、self可以不写吗？
在Python解释器的内部，当我们调用t.ppr()时，实际上Python解释成Test.ppr(t)，也就是把self替换成了类的实例。

class Test:
    def ppr():
        print(self)

t = Test()
t.ppr()

运行结果如下：

Traceback (most recent call last):
  File "cl.py", line 6, in <module>
    t.ppr()
TypeError: ppr() takes 0 positional arguments but 1 was given

运行时提醒错误如下：ppr在定义时没有参数，但是我们运行时强行传了一个参数。

由于上面解释过了t.ppr()等同于Test.ppr(t)，所以程序提醒我们多传了一个参数t。

这里实际上已经部分说明了self在定义时不可以省略。

当然，如果我们的定义和调用时均不传类实例是可以的，这就是类方法。

class Test:
    def ppr():
        print(__class__)

Test.ppr()

运行结果：
<class '__main__.Test'>

（3）、在继承时，传入的是哪个实例，就是那个传入的实例，而不是指定义了self的类的实例。

class Parent:
    def pprt(self):
        print(self)

class Child(Parent):
    def cprt(self):
        print(self)
c = Child()
c.cprt()
c.pprt()
p = Parent()
p.pprt()

运行结果：

<__main__.Child object at 0x0000000002A47080>
<__main__.Child object at 0x0000000002A47080>
<__main__.Parent object at 0x0000000002A47240>

解释：
运行c.cprt()时应该没有理解问题，指的是Child类的实例。
但是在运行c.pprt()时，等同于Child.pprt(c)，所以self指的依然是Child类的实例，由于self中没有定义pprt()方法，所以沿着继承树往上找，发现在父类Parent中定义了pprt()方法，所以就会成功调用。

（4）、在描述符类中，self指的是描述符类的实例

class Desc:
    def __get__(self, ins, cls):
        print('self in Desc: %s ' % self )
        print(self, ins, cls)
class Test:
    x = Desc()
    def prt(self):
        print('self in Test: %s' % self)
t = Test()
t.prt()
t.x

运行结果如下：

self in Test: <__main__.Test object at 0x0000000002A570B8>
self in Desc: <__main__.Desc object at 0x000000000283E208>
<__main__.Desc object at 0x000000000283E208> <__main__.Test object at 0x0000000002A570B8> <class '__main__.Test'>

这里主要的疑问应该在：Desc类中定义的self不是应该是调用它的实例t吗？怎么变成了Desc类的实例了呢？
因为这里调用的是t.x，也就是说是Test类的实例t的属性x，由于实例t中并没有定义属性x，所以找到了类属性x，而该属性是描述符属性，为Desc类的实例而已，所以此处并没有顶用Test的任何方法。

那么我们如果直接通过类来调用属性x也可以得到相同的结果。

下面是把t.x改为Test.x运行的结果。

self in Test: <__main__.Test object at 0x00000000022570B8>
self in Desc: <__main__.Desc object at 0x000000000223E208>
<__main__.Desc object at 0x000000000223E208> None <class '__main__.Test'>
########################################################################################################################
如果想把打印出的
1
2
3
变成
1 2 3
那么应该print(a, end=" ")
########################################################################################################################
如果多个逻辑运算符都使用怎么办？我们可以很简单的使用小括号()来确定先判断哪个部分，小括号具有最高运算优先级别，比如下图的栗子：
以下是咱们可爱的代码（双击代码可以进行复制哟）：
x = 1
y = 2
if (not x == 0) or (x > 1 and y <= 2):
    print(x * y)
上面这种情况，我们就把小括号作为一个整体，先把每一个小括号的内容全部判断完毕，当然，小括号甚至可以嵌套，大家可以自己去尝试。比如例子这里，
我们先判断(not x == 0)这个整体，它整体得到的结果是真，然后再判断后面(x > 1 and y <= 2)这一部分，它们整体得到的结果为假，真 or 假一起来判断，
最后的结果是真，因此可以执行代码块。
########################################################################################################################
Python sort()
内部实现机制为：Timesort
最坏时间复杂度为：O（n log n）
空间复杂度为：O（n）
Timsort是结合了合并排序（merge sort）和插入排序（insertion sort）而得出的排序算法，它在现实中有很好的效率。Tim Peters在2002年设计了该算法
并在Python中使用（TimSort 是 Python 中 list.sort 的默认实现）。该算法找到数据中已经排好序的块-分区，每一个分区叫一个run，然后按规则合并这些
run。Pyhton自从2.3版以来一直采用Timsort算法排序，现在Java SE7和Android也采用Timsort算法对数组排序。
########################################################################################################################
sort是容器的函数：sort(cmp=None, key=None, reverse=False)
sorted是python的内建函数：sorted(iterable, cmp=None, key=None, reverse=False)
示例1：
>>> a=[1,2,5,3,9,4,6,8,7,0,12]
>>> a.sort()
>>> a
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12]

>>> a=[1,2,5,3,9,4,6,8,7,0,12]
>>> sorted(a)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12]
>>> a
[1, 2, 5, 3, 9, 4, 6, 8, 7, 0, 12]

区别：
对于一个无序的列表a，调用a.sort()，对a进行排序后返回a，sort()函数修改待排序的列表内容。
而对于同样一个无序的列表a，调用sorted(a)，对a进行排序后返回一个新的列表，而对a不产生影响。

示例2：
假设用元组保存每一个学生的信息，包括学号，姓名，年龄。用列表保存所有学生的信息。
>>> list1=[(8, 'Logan', 20), (2, 'Mike', 22), (5, 'Lucy', 19)]
>>> list1.sort()
>>> list1
[(2, 'Mike', 22), (5, 'Lucy', 19), (8, 'Logan', 20)]

>>> list1=[(8, 'Logan', 20), (2, 'Mike', 22), (5, 'Lucy', 19)]
>>> sorted(list1)
[(2, 'Mike', 22), (5, 'Lucy', 19), (8, 'Logan', 20)]
>>> list1
[(8, 'Logan', 20), (2, 'Mike', 22), (5, 'Lucy', 19)]

小结：由示例可以看出，当列表由list（或者tuple）组成时，默认情况下，sort和sorted都会根据list[0]（或者tuple[0]）作为排序的key，进行排序。
########################################################################################################################
Two sum且未排序的问题如果用two pointers一般会先排序，如果题目需要有add或者delete功能，对于有序数列进行add和二分的时间复杂度无法都好，
这种情况就需要用字典(哈希表），能达到O(1)
########################################################################################################################
for 循环使用 enumerate
>>>seq = ['one', 'two', 'three']
>>> for i, element in enumerate(seq):
...     print i, element
...
0 one
1 two
2 three
########################################################################################################################
nums = [(number, index) for index, number in enumerate(numbers)]
nums = sorted(nums)
能解决需要改变列表顺序但需要列表原始顺序的问题
########################################################################################################################
remove删除第一个匹配值，而不是特定的索引
del 删除特定索引处的项目
pop从特定索引处删除该项目并返回它
########################################################################################################################
while 中的变量必须先指定，不能像for那样，for i in range()
########################################################################################################################
Python 中平方的写法不是 n^2，而是**
########################################################################################################################
以下是 math 模块 pow() 方法的语法:

import math

math.pow( x, y )
内置的 pow() 方法

pow(x, y[, z])
函数是计算 x 的 y 次方，如果 z 在存在，则再对结果进行取模，其结果等效于 pow(x,y) %z。

注意：pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。
########################################################################################################################
enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。

Python 2.3. 以上版本可用，2.6 添加 start 参数。

语法
以下是 enumerate() 方法的语法:

enumerate(sequence, [start=0])
参数
sequence -- 一个序列、迭代器或其他支持迭代对象。
start -- 下标起始位置。
返回值
返回 enumerate(枚举) 对象。
########################################################################################################################
十六进制 到 十进制

使用 int() 函数 ，第一个参数是字符串 '0Xff' ,第二个参数是说明，这个字符串是几进制的数。  转化的结果是一个十进制数。

>>> int('0xf',16)
15

二进制 到 十进制

>>> int('10100111110',2)
1342

八进制 到 十进制

>>> int('17',8)
15

其实可以看到，不管 几进制数 转换成 十进制数 ，都是用 int()  函数 。之后后面的 第二个参数 写清楚 前面字符串 是 几进制数就可以 。注意一定要合法。 比如2进制数就不能出现2这样的字符。

----------------------------------------------------------------------------------------------------------------------------
十进制 转 十六进制
>>> hex(1033)
'0x409'

二进制 转 十六进制
就是 二进制先转成 十进制， 再转成 十六进制。
>>> hex(int('101010',2))
'0x2a'

八进制到 十六进制
就是 八进制先转成 十进制， 再转成 十六进制。
>>> hex(int('17',8))
'0xf'
----------------------------------------------------------------------------------------------------------------------------
十进制转二进制，会产生0b这两个字符
>>> bin(10)
'0b1010'

十六进制转 二进制
十六进制->十进制->二进制
>>> bin(int('ff',16))
'0b11111111'

八进制 到 二进制
八进制先到十进制，再到二进制
>>> bin(int('17',8))
'0b1111'
----------------------------------------------------------------------------------------------------------------------------
二进制 到 八进制
>>> oct(0b1010)
'012'

十进制到八进制
>>> oct(11)
'013'

十六进制到八进制
>>> oct(0xf)
'017'

可见oct 函数 可将 任意进制的数 转换成 8进制的。
########################################################################################################################
在if判定中的操作，例如(pop())，如果是操作后满足了if的条件，则操作会被保留：
        for bracket in s:
            if bracket in bracket_dict:
                stack.append(bracket_dict[bracket])
            elif not stack or bracket != stack.pop():
                return False
只要是bracket != stack.pop()运行过一遍，不管满不满足条件，都会被保留
########################################################################################################################
双指针模版 O(n)时间复杂度，对于连续的数据求最小子序列、子串，求最少K个不同元素的子序列数量等就用双指针，一般是最佳
while left <= right and left < n:
    while (right < n and count < k):
完整流程：
while 前驱指针没走完
    while 不满足要求 且 后继指针没走完
        维护辅助变量
        前驱指针前移
    维护辅助变量以及答案
    后继指针前移
得到答案
########################################################################################################################
Python ord() 函数
Python 内置函数 Python 内置函数

描述
ord() 函数是 chr() 函数（对于8位的ASCII字符串）或 unichr() 函数（对于Unicode对象）的配对函数，它以一个字符（长度为1的字符串）作为参数，
返回对应的 ASCII 数值，或者 Unicode 数值，如果所给的 Unicode 字符超出了你的 Python 定义范围，则会引发一个 TypeError 的异常。

语法
以下是 ord() 方法的语法:

ord(c)
参数
c -- 字符。
返回值
返回值是对应的十进制整数。

实例
以下展示了使用 ord() 方法的实例：

>>>ord('a')
97
>>> ord('b')
98
>>> ord('c')
99
########################################################################################################################
Python生成排列组合，解决不知道有几个循环的问题
import itertools
list1 = [1, 2, 3, 4, 5]
#所有组合结果
print (list(itertools.combinations(list1, 5)))

list2 = [1, 2, 3,4]
#两个list的笛卡儿积相当于排列结果
print(list(itertools.product(list2, list2)))
#从list中排列出repeat个元素
print(list(itertools.product(list2, repeat=4)))

import scipy.special
#排列数计算
print(scipy.special.perm(5,2))
#组合数计算
print(scipy.special.comb(5,2))
########################################################################################################################
The itertools.combinations() function takes two arguments—an iterable inputs and a positive integer n—and produces an iterator over tuples of all combinations of n elements in inputs.
>>> list(it.combinations(bills, 3))
 [(20, 20, 20), (20, 20, 10), (20, 20, 10), ... ]
 To remove duplicates from makes_100, you can convert it to a set:
 >>> set(makes_100)
itertools.combinations_with_replacement() function. It works just like combinations(), accepting an iterable inputs and a positive integer n, and returns an iterator over n-tuples of elements from inputs. The difference is that combinations_with_replacement() allows elements to be repeated in the tuples it returns.
For example:

>>> list(it.combinations_with_replacement([1, 2], 2))
[(1, 1), (1, 2), (2, 2)]
Compare that to combinations():

>>> list(it.combinations([1, 2], 2))
[(1, 2)]

Another “brute force” itertools function is permutations(), which accepts a single iterable and produces all possible permutations (rearrangements) of its elements:
>>> list(it.permutations(['a', 'b', 'c']))
[('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'),
 ('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')]
########################################################################################################################
python的deque（双向）队列详解：https://www.cnblogs.com/ranzhong/p/12438841.html
########################################################################################################################
Python set() 函数
Python 内置函数 Python 内置函数

描述
set() 函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。

语法
set 语法：

class set([iterable])
参数说明：

iterable -- 可迭代对象对象；
返回值
返回新的集合对象。

实例
以下实例展示了 set 的使用方法：

>>>x = set('runoob')
>>> y = set('google')
>>> x, y
(set(['b', 'r', 'u', 'o', 'n']), set(['e', 'o', 'g', 'l']))   # 重复的被删除
>>> x & y         # 交集
set(['o'])
>>> x | y         # 并集
set(['b', 'e', 'g', 'l', 'o', 'n', 'r', 'u'])
>>> x - y         # 差集
set(['r', 'b', 'u', 'n'])
########################################################################################################################
python中break、continue 、exit() 、pass终止循环的区别
1、break:跳出本层循环，不再执行
Python break语句，就像在C语言中，打破了最小封闭for或while循环。
break语句用来终止循环语句，即循环条件没有False条件或者序列还没被完全递归完，也会停止执行循环语句。
break语句用在while和for循环中。
如果您使用嵌套循环，break语句将停止执行最深层的循环，并开始执行下一行代码。
2、continue：跳出本次循环，执行下一次
Python continue 语句跳出本次循环，而break跳出整个循环。
continue 语句用来告诉Python跳过当前循环的剩余语句，然后继续进行下一轮循环。
continue语句用在while和for循环中。
3、exit():结束整个程序
4、pass:不做任何事情，只起到占位的作用
########################################################################################################################
Python3 chr() 函数
Python3 内置函数Python3 内置函数

描述
chr() 用一个整数作参数，返回一个对应的字符。

语法
以下是 chr() 方法的语法:

chr(i)
参数
i -- 可以是 10 进制也可以是 16 进制的形式的数字，数字范围为 0 到 1,114,111 (16 进制为0x10FFFF)。
返回值
返回值是当前整数对应的 ASCII 字符。

实例
以下展示了使用 chr() 方法的实例：

>>>chr(0x30)
'0'
>>> chr(97)
'a'
>>> chr(8364)
'€'

ord()函数主要用来返回对应字符的ascii码，chr()主要用来表示ascii码对应的字符他的输入时数字，可以用十进制，也可以用十六进制。
例如：print ord('a)
          #97
          print chr(97)
         #a
         print chr(0x61)
        #a
一个简单的程序来灵活运用。
str1='asdfasdf123123'
for i in rang(len(str1)):
     print  chr(ord(str1[i])-1)
#以上程序主要实现对字符串str1里面所有的字符，转换成ascii码中比他们小一位的字符。
########################################################################################################################
归并排序的最好，最坏，平均时间复杂度均为O(nlogn)。
########################################################################################################################
range(start, stop[, step])
参数说明：
start: 计数从 start 开始。默认是从 0 开始。例如range（5）等价于range（0， 5）;
stop: 计数到 stop 结束，但不包括 stop。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5
step：步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)
########################################################################################################################
python数据结构之堆(heap)：https://www.cnblogs.com/kumata/p/9201571.html
复杂度分析：
Implementation             Insert           Del Max           Max
Unordered Array            1                N                 N
Sort                       N                1                 1
Binary Heap                log N            log N             1
D-ary Heap                 logd N           dlogd N           1
heaqp模块提供了堆队列算法的实现，也称为优先级队列算法。
要创建堆，请使用初始化为[]的列表，或者可以通过函数heapify（）将填充列表转换为堆。
提供以下功能：
heapq.heappush（堆，项目）
将值项推入堆中，保持堆不变。
heapq.heapify（x）
在线性时间内将列表x转换为堆。
heapq.heappop（堆）
弹出并返回堆中的最小项，保持堆不变。如果堆是空的，则引发IndexError。
heapreplace(heap, x)
弹出最小的元素，并将x压入堆中
nlargest(n, iter)
返回iter中n个最大的元素
nsmallest(n, iter)
返回iter中n个最小的元素
########################################################################################################################
匿名函数
python 使用 lambda 来创建匿名函数。

lambda只是一个表达式，函数体比def简单很多。
lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。
lambda函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。
虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。
语法
lambda函数的语法只包含一个语句，如下：

lambda [arg1 [,arg2,.....argn]]:expression
如下实例：

实例(Python 2.0+)
#!/usr/bin/python
# -*- coding: UTF-8 -*-

# 可写函数说明
sum = lambda arg1, arg2: arg1 + arg2

# 调用sum函数
print "相加后的值为 : ", sum( 10, 20 )
print "相加后的值为 : ", sum( 20, 20 )
以上实例输出结果：

相加后的值为 :  30
相加后的值为 :  40
########################################################################################################################
turtle,数字属于不可变量，哪怕调用函数，函数内有新的赋值，原变量不会变，因为调用函数会复制这个变量，改变的是副本变量
########################################################################################################################
一旦一个问题可以通过贪心法来解决，那么贪心法一般是解决这个问题的最好办法。
########################################################################################################################
Python3没有sys.maxint，只有sys.maxsize
########################################################################################################################
生成指定长度相同元素的列表可以用list = [value] * (元素个数)，生成m * n数组可以用list = [[value] * n for _ in range(m)]
########################################################################################################################
x *= 3等同于x = x * 3
########################################################################################################################
/浮点除法，//整数除法
########################################################################################################################
return 后面的变量必须一开始要声明，不能直接在循环中用a = xx来声明
########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################

########################################################################################################################



